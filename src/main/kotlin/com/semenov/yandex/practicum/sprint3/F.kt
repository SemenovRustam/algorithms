package com.semenov.yandex.practicum.sprint3

fun main() {
    val segment = readln().toInt()
    val lengths = readln().split(" ").map { it.toInt() }

    println(getPerimeter(lengths))
}

private fun getPerimeter(lengths: List<Int>): Int {
    val descendingLengths = lengths.sortedDescending()

    for (index in 0 until descendingLengths.size - 2) {
        val c = descendingLengths[index]
        val a = descendingLengths[index + 1]
        val b = descendingLengths[index + 2]

        if (checkTriangleRole(a, b, c)) {
            return a + b + c
        }
    }

    return 0
}

private fun checkTriangleRole(a: Int, b: Int, c: Int) = a + b > c

/**
Перед сном Рита решила поиграть в игру на телефоне.
Дан массив целых чисел, в котором каждый элемент обозначает длину стороны треугольника.
Нужно определить максимально возможный периметр треугольника, составленного из сторон с длинами из заданного массива.
Помогите Рите скорее закончить игру и пойти спать.

Напомним, что из трёх отрезков с длинами a ≤ b ≤ c можно составить треугольник,
если выполнено неравенство треугольника: c < a + b

Разберём пример:
даны длины сторон 6, 3, 3, 2. Попробуем в качестве наибольшей стороны выбрать 6.
Неравенство треугольника не может выполниться, так как остались 3, 3, 2 —– максимальная сумма из них равна 6.

Без шестёрки оставшиеся три отрезка уже образуют треугольник со сторонами 3, 3, 2.
Неравенство выполняется: 3 < 3 + 2. Периметр равен 3 + 3 + 2 = 8.

Формат ввода
В первой строке записано количество отрезков n, 3≤ n≤ 10000.

Во второй строке записано n неотрицательных чисел, не превосходящих 10 000, –— длины отрезков.

Формат вывода
Нужно вывести одно число —– наибольший периметр треугольника.

Гарантируется, что тройка чисел, которая может образовать треугольник, всегда есть.

Пример 1
Ввод
4
6 3 3 2

Вывод
8

Пример 2
Ввод
6
5 3 7 2 8 3

Вывод
20
 * */
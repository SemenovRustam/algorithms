package com.semenov.yandex.practicum.sprint3

/**
https://contest.yandex.ru/contest/23815/run-report/116893291/

В данном алгоритме используется способ быстрой сортировки

Функция quicksort рекурсивно сортирует массив участников.
Массив делится на две части, используя функцию partition, и затем сортирует каждую часть отдельно.

Функция partition:
Выбирается опорный элемент - случайный участник. Происходит сдвиг случайного участника на позицию наибольшего индекса в массиве.
Указатель I инициализируем как - 1, за пределами массива. В цикле проходимся и находим участников, больше  опорного
по решенным задачам, если же задачи равны, то меньшим по штрафу, если эти два значения равны проверяется лексикографическое значение по имени.

Если участник соответствует данному условие, то индекс I увеличиваем на 1.
Этот индекс показывает на неотсортированного участника по условию задачи.
Происходит замена участника с индексом I и индексом J.

Функция partition выбирает опорный элемент (pivot) и перемещает элементы так, чтобы все элементы,
которые больше опорного, оказались справа от него, а все элементы, которые меньше или равны опорному,
оказались слева.

Участники сортируются в порядке убывания по решенным задачам.
Если кол-во задач одинаково, сортируется по кол-ву штрафа в порядке возрастания.
Если решенные задачи и кол-во штрафов одинаково, то участники сортируются по имени.

Доказательство корректности:

В начале каждого рекурсивного вызова quicksort массив делится на две группы: меньшие и большие или равные опорному элементу.
Если массив содержит 0 или 1 элемент, он считается отсортированным.
Если массив содержит более одного элемента, выполняется рекурсивный вызов quicksort для каждой группы.
Поскольку каждая группа меньше исходного массива, можем предположить, что каждая группа будет отсортирована после рекурсивного вызова.
Когда рекурсия завершается, массив будет отсортированные.

Средняя временная сложность O(n log n) достигается благодаря тому,
что алгоритм делит массив на две примерно равные части на каждой итерации.
В худшем случае, когда массив делится на очень неравные части,
временная сложность увеличивается до O(n^2).

Т.к. алгоритм использует рекурсию, пространственная сложность быстрой сортировки будет:

Средний случай: O(log n)
Худший случай: O(n)
 */

fun main() {
    val count = readln().toInt()

    val members = Array(count) {
        val (name, solvedTask, fine) = readln().split(" ")
        Member(
            name = name,
            solvedTask = solvedTask.toInt(),
            fine = fine.toInt()
        )
    }

    val memberComparator: Comparator<Member> = compareByDescending<Member> { it.solvedTask }
        .thenBy { it.fine }
        .thenBy { it.name }

    members.quicksort(0, members.lastIndex, memberComparator)

    val result = members.joinToString("\n") { it.name }
    println(result)
}

private fun <T> Array<T>.quicksort(low: Int, high: Int, comparator: Comparator<T>) {
    if (low < high) {
        val pivotIndex = this.partition(low, high, comparator)
        quicksort(low, pivotIndex - 1, comparator)
        quicksort(pivotIndex + 1, high, comparator)
    }
}

private fun <T> Array<T>.partition(low: Int, high: Int, comparator: Comparator<T>): Int {
    val random = (low..high).random()
    swap(random, high)
    val pivot = this[high]

    var indexForSwap = low - 1

    for (j in low until high) {
        val member = this[j]
        if (comparator.compare(member, pivot) <= 0) {
            indexForSwap++
            swap(indexForSwap, j)
        }
    }
    swap(indexForSwap + 1, high)
    return indexForSwap + 1
}

private fun <T> Array<T>.swap(i: Int, j: Int) {
    val temp = this[i]
    this[i] = this[j]
    this[j] = temp
}

data class Member(
    val name: String,
    val solvedTask: Int,
    val fine: Int
)

/**

B. Эффективная быстрая сортировка
Язык	Ограничение времени	Ограничение памяти	Ввод	Вывод
Все языки	0.5 секунд	17Mb	стандартный ввод или input.txt	стандартный вывод или output.txt
Node.js 14.15.5	2 секунды	64Mb
Python 3.7.3	3 секунды	64Mb
OpenJDK Java 11	3 секунды	64Mb
C# (MS .NET 6.0 + ASP)	3 секунды	64Mb
Python 3.12.1	3 секунды	64Mb
Java 21 (Temurin JDK)	3 секунды	64Mb
Kotlin 1.8.0 (JRE 11)	3 секунды	64Mb
C# (MS .NET 5.0 + ASP)	3 секунды	64Mb
Тимофей решил организовать соревнование по спортивному программированию, чтобы найти талантливых стажёров.
Задачи подобраны, участники зарегистрированы, тесты написаны.
Осталось придумать, как в конце соревнования будет определяться победитель.

Каждый участник имеет уникальный логин. Когда соревнование закончится, к нему будут
привязаны два показателя: количество решённых задач Pi и размер штрафа Fi.
Штраф начисляется за неудачные попытки и время, затраченное на задачу.

Тимофей решил сортировать таблицу результатов следующим образом:
при сравнении двух участников выше будет идти тот, у которого решено больше задач.
При равенстве числа решённых задач первым идёт участник с меньшим штрафом.
Если же и штрафы совпадают, то первым будет тот, у которого логин идёт раньше в алфавитном (лексикографическом) порядке.

Тимофей заказал толстовки для победителей и накануне поехал за ними в магазин.
В своё отсутствие он поручил вам реализовать алгоритм быстрой сортировки (англ. quick sort)
для таблицы результатов. Так как Тимофей любит спортивное программирование
и не любит зря расходовать оперативную память, то ваша реализация сортировки не может
потреблять O(n) дополнительной памяти для промежуточных
данных (такая модификация быстрой сортировки называется "in-place").

Как работает in-place quick sort
Как и в случае обычной быстрой сортировки, которая использует дополнительную память,
необходимо выбрать опорный элемент (англ. pivot), а затем переупорядочить массив.
Сделаем так, чтобы сначала шли элементы, не превосходящие опорного, а затем —– большие опорного.

Затем сортировка вызывается рекурсивно для двух полученных частей.
Именно на этапе разделения элементов на группы в обычном алгоритме используется дополнительная память.
Теперь разберёмся, как реализовать этот шаг in-place.

Пусть мы как-то выбрали опорный элемент. Заведём два указателя left и right,
которые изначально будут указывать на левый и правый концы отрезка соответственно.
Затем будем двигать левый указатель вправо до тех пор, пока он указывает на элемент,
меньший опорного. Аналогично двигаем правый указатель влево, пока он стоит на элементе,
превосходящем опорный. В итоге окажется, что что левее от left все элементы точно принадлежат первой группе,
а правее от right — второй. Элементы, на которых стоят указатели, нарушают порядок.
Поменяем их местами (в большинстве языков программирования используется
функция swap()) и продвинем указатели на следующие элементы.
Будем повторять это действие до тех пор, пока left и right не столкнутся.
На рисунке представлен пример разделения при pivot=5. Указатель left — голубой, right — оранжевый.

Формат ввода
В первой строке задано число участников n, 1 ≤ n ≤ 100 000.
В каждой из следующих n строк задана информация про одного из участников.
i-й участник описывается тремя параметрами:

уникальным логином (строкой из маленьких латинских букв длиной не более 20)
числом решённых задач Pi
штрафом Fi
Fi и Pi — целые числа, лежащие в диапазоне от 0 до 109.
Формат вывода
Для отсортированного списка участников выведите по порядку их логины по одному в строке.


5
alla 4 100
gena 6 1000
gosha 2 90
rita 2 90
timofey 4 80

Вывод:

gena
timofey
alla
gosha
rita


5
alla 0 0
gena 0 0
gosha 0 0
rita 0 0
timofey 0 0

Вывод:

alla
gena
gosha
rita
timofey
 */
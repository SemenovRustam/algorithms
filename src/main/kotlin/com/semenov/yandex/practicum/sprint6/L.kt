package com.semenov.yandex.practicum.sprint6

fun main() {
    val split = readln().split(" ").map { it.toInt() }
    val n = split[0]
    val m = split[1]
    val graph = List(n + 1) { mutableListOf<Int>() }

    repeat(m) {
        val (u, v) = readln().split(" ").map { it.toInt() }
        graph[u].add(v)
        graph[v].add(u)
    }

    for (i in 1..n) {
        for (j in 1 .. n) {
            if (j != i && j !in graph[i]) {
                println("NO")
                return
            }
        }
    }
    println("YES")
}

/**
 * L. Полный граф
Язык	Ограничение времени	Ограничение памяти	Ввод	Вывод
Все языки	1 секунда	64Mb	стандартный ввод или input.txt	стандартный вывод или output.txt
Node.js 14.15.5	2 секунды	256Mb
OpenJDK Java 11	2 секунды	256Mb
C# (MS .NET 6.0 + ASP)	2 секунды	256Mb
Java 21 (Temurin JDK)	2 секунды	256Mb
Kotlin 1.8.0 (JRE 11)	2.5 секунд	256Mb
Python 3.12.3	3 секунды	256Mb
C# (MS .NET 5.0 + ASP)	2 секунды	256Mb
Неориентированный граф называется полным, если в нём каждая пара различных вершин соединена ребром.

Вам дан неориентированный граф из n вершин и m рёбер. Выясните, является ли этот граф полным.

Формат ввода
В первой строке дано число вершин n (1 ≤ n ≤ 105) и число рёбер m (0 ≤ m ≤ 5 ⋅ 105).
В следующих m строках записаны рёбра в виде пар вершин u и v (1 ≤ u, v ≤ n).

Формат вывода
Если граф является полным, выведите «YES», иначе выведите «NO».

Пример 1
Ввод
4 6
1 2
2 2
2 3
2 4
3 4
4 3

Вывод
NO

Пример 2
Ввод
3 5
1 2
2 1
3 1
2 3
3 3

Вывод
YES

Примечания
Помните про кратные ребра и петли — они могут быть в графе.
 */